/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  7
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include "../0/include/inputs"

convertToMeters 1.0; // all coordinates are scaled by this factor

A   18; // inlet section length
B   18; // outlet section length
C   18; // test section sides width
L   31; // test section length
W   26; // test section width
H   33; // domain height

// shifts of origin
delta 0.5; // shift, fraction of L, must be between 0 and 1 (x) 
gamma 0.5; //  shift, fraction of W, must be between 0 and 1 (y)

//
NxA   12; // nr cells inlet section (x)
NxB   12; // nr cells outlet section (x)
NyC   12; // nr cells test section sides (y) 
//
NxL   20; // nr cells test section length (x) 
NyW   20; // nr cells test section width (y) 
//
NzH   21; // nr of cells height (z)

//
// grading options (set to 1.0 for no grading)
// all grading must be >= 1.0
//

// grading for A >= 1.0 (cells grow towards inlet in the -x direction)
gradingA 1.0;
// grading for B >= 1.0 (cells grow towards outlet in the +x direction)
gradingB 1.0;
// grading for C >= 1.0 (cells grow outwards in the +/- y direction)
gradingC 1.0;
// grading for H >= 1.0 (cells grow upwards in the +z direction)
gradingH 1.0;



////   ---------- do not change below ----------- /////

// calculate some key coordinates
// non-rotated mesh

x0_base #calc "-($L*0.5)";
x1_base #calc "$L*0.5";
x4_base #calc "-($A+$L*0.5)";
x7_base #calc "$B+$L*0.5";

y0_base  #calc "-($W*0.5)";
y3_base  #calc "$W*0.5";
y4_base  #calc "-($W*0.5+$C)";
y10_base #calc "$W*0.5+$C";

z0_base  #calc "$H*0.0";
z16_base #calc "$H";

// compute rotation angle in radiants
rotAngle_rads #calc "$rotAngle*3.14159265359/180.0";

// sine and cosine
cosA #calc "cos($rotAngle_rads*1.0)"; 
sinA #calc "sin($rotAngle_rads*1.0)"; 

// shifts
xs #calc "$L*(0.5-$delta)";
ys #calc "$W*(0.5-$gamma)";

// non-rotated coordinates of test section
x0 #calc "$x0_base+$xs";
x1 #calc "$x1_base+$xs";
x2 #calc "$x1_base+$xs";
x3 #calc "$x0_base+$xs";

y0 #calc "$y0_base+$ys";
y1 #calc "$y0_base+$ys";
y2 #calc "$y3_base+$ys";
y3 #calc "$y3_base+$ys";

// rotated coordinates of outer domain 

// x
x4  #calc "$x4_base*$cosA -($y4_base*$sinA)+$xs";
x5  #calc "$x0_base*$cosA -($y4_base*$sinA)+$xs";
x6  #calc "$x1_base*$cosA -($y4_base*$sinA)+$xs";
x7  #calc "$x7_base*$cosA -($y4_base*$sinA)+$xs";
//
x8  #calc "$x7_base*$cosA -($y0_base*$sinA)+$xs";
x9  #calc "$x7_base*$cosA -($y3_base*$sinA)+$xs";
//
x10 #calc "$x7_base*$cosA -($y10_base*$sinA)+$xs";
x11 #calc "$x1_base*$cosA -($y10_base*$sinA)+$xs";
x12 #calc "$x0_base*$cosA -($y10_base*$sinA)+$xs";
x13 #calc "$x4_base*$cosA -($y10_base*$sinA)+$xs";
//
x14 #calc "$x4_base*$cosA -($y3_base*$sinA)+$xs";
x15 #calc "$x4_base*$cosA -($y0_base*$sinA)+$xs";

// y
y4  #calc "$x4_base*$sinA +($y4_base*$cosA)+$ys";
y5  #calc "$x0_base*$sinA +($y4_base*$cosA)+$ys";
y6  #calc "$x1_base*$sinA +($y4_base*$cosA)+$ys";
y7  #calc "$x7_base*$sinA +($y4_base*$cosA)+$ys";
//
y8  #calc "$x7_base*$sinA +($y0_base*$cosA)+$ys";
y9  #calc "$x7_base*$sinA +($y3_base*$cosA)+$ys";
//
y10 #calc "$x7_base*$sinA +($y10_base*$cosA)+$ys";
y11 #calc "$x1_base*$sinA +($y10_base*$cosA)+$ys";
y12 #calc "$x0_base*$sinA +($y10_base*$cosA)+$ys";
y13 #calc "$x4_base*$sinA +($y10_base*$cosA)+$ys";
//
y14 #calc "$x4_base*$sinA +($y3_base*$cosA)+$ys";
y15 #calc "$x4_base*$sinA +($y0_base*$cosA)+$ys";

// invert gradings
igradingA #calc "1.0/$gradingA";
igradingB #calc "1.0/$gradingB";
igradingC #calc "1.0/$gradingC";
igradingH #calc "1.0/$gradingH";

vertices
(

  // test section, bottom surface
  ( $x0   $y0   $z0_base ) //  0
  ( $x1   $y1   $z0_base ) //  1
  ( $x2   $y2   $z0_base ) //  2 
  ( $x3   $y3   $z0_base ) //  3

  // outer domain, bottom surface
  ( $x4   $y4   $z0_base ) //  4
  ( $x5   $y5   $z0_base ) //  5
  ( $x6   $y6   $z0_base ) //  6 
  ( $x7   $y7   $z0_base ) //  7
  ( $x8   $y8   $z0_base ) //  8 
  ( $x9   $y9   $z0_base ) //  9
  ( $x10  $y10  $z0_base ) //  10 
  ( $x11  $y11  $z0_base ) //  11
  ( $x12  $y12  $z0_base ) //  12 
  ( $x13  $y13  $z0_base ) //  13
  ( $x14  $y14  $z0_base ) //  14
  ( $x15  $y15  $z0_base ) //  15 

  // test section, top surface
  ( $x0   $y0   $z16_base ) //  16 
  ( $x1   $y1   $z16_base ) //  17
  ( $x2   $y2   $z16_base ) //  18
  ( $x3   $y3   $z16_base ) //  19

  // outer domain, top surface
  ( $x4   $y4   $z16_base ) //  20 
  ( $x5   $y5   $z16_base ) //  21
  ( $x6   $y6   $z16_base ) //  22
  ( $x7   $y7   $z16_base ) //  23
  ( $x8   $y8   $z16_base ) //  24
  ( $x9   $y9   $z16_base ) //  25
  ( $x10  $y10  $z16_base ) //  26 
  ( $x11  $y11  $z16_base ) //  27
  ( $x12  $y12  $z16_base ) //  28 
  ( $x13  $y13  $z16_base ) //  29
  ( $x14  $y14  $z16_base ) //  30
  ( $x15  $y15  $z16_base ) //  31 

);

blocks 
(
    //hex (0 1 5 4 16 17 21 20)    main  ($Nxinlet $Nyside $NzH) simpleGrading (1 1 1) // top 

    // inlets
    hex (14 3 12 13 30 19 28 29) main ($NxA $NyC $NzH) simpleGrading ($igradingA $gradingC  $gradingH) // top
    hex (15 0 3 14 31 16 19 30 ) main ($NxA $NyW $NzH) simpleGrading ($igradingA 1.0        $gradingH) // mid 
    hex (4 5 0 15 20 21 16 31  ) main ($NxA $NyC $NzH) simpleGrading ($igradingA $igradingC $gradingH) // bottom

    // test top and bottom
    hex (3 2 11 12 19 18 27 28)  main ($NxL $NyC $NzH) simpleGrading (1.0 $gradingC  $gradingH) // top
    hex (5 6 1 0 21 22 17 16  )  main ($NxL $NyC $NzH) simpleGrading (1.0 $igradingC $gradingH) // bottom

    // test 
    hex (0 1 2 3 16 17 18 19  )  main ($NxL $NyW $NzH) simpleGrading (1.0 1.0 $gradingH) // mid 

    // outlets 
    hex (2 9 10 11 18 25 26 27) main ($NxB $NyC $NzH) simpleGrading ($gradingB $gradingC  $gradingH) // top
    hex (1 8 9 2 17 24 25 18  ) main ($NxB $NyW $NzH) simpleGrading ($gradingB 1.0        $gradingH) // mid 
    hex (6 7 8 1 22 23 24 17  ) main ($NxB $NyC $NzH) simpleGrading ($gradingB $igradingC $gradingH) // bottom

);

edges
(

);

boundary
(
    yMinusWall
    {
        type patch;
        faces
        (
          (4 5 21 20)
          (5 6 22 21)
          (6 7 23 22)
        );
    }

    yPlusWall
    {
        type patch;
        faces
        (
          (13 12 28 29)
          (12 11 27 28)
          (11 10 26 27)
        );
    }

    inlet
    {
        type patch;
        faces
        (
          (4 15 31 20)
          (15 14 30 31)
          (14 13 29 30) 
        );
    }

    outlet
    {
        type patch;
        faces
        (
           (7 8 24 23)
           (8 9 25 24)
           (9 10 26 25)
        ); 
    }

    bottomWall
    {
        type patch;
        faces
        (
           (4 5 0 15)
           (5 6 1 0)
           (6 7 8 1)
           (15 0 3 14)
           (0 1 2 3)
           (1 8 9 2)
           (14 3 12 13)
           (3 2 11 12)
           (2 9 10 11)
        );
    }

    topWall
    {
        type patch;
        faces
        (
          (20 21 16 31)
          (21 22 17 16)
          (22 23 24 17)
          (31 16 19 30)
          (16 17 18 19)
          (17 24 25 18)
          (30 19 28 29)
          (19 18 27 28)
          (18 25 26 27)
        );
    }
);

// ************************************************************************* //
